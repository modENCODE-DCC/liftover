# patch -p0 -i net.sf.samtools.SAMTextReader.java.patch
Index: ../picard/src/java/net/sf/samtools/SAMTextReader.java
===================================================================
--- ../picard/src/java/net/sf/samtools/SAMTextReader.java	(revision 740)
+++ ../picard/src/java/net/sf/samtools/SAMTextReader.java	(working copy)
@@ -332,7 +332,14 @@
                 }
 
             final int pos = parseInt(mFields[POS_COL], "POS");
-            final int mapq = parseInt(mFields[MAPQ_COL], "MAPQ");
+            int mapq;
+            try {
+            	mapq = parseInt(mFields[MAPQ_COL], "MAPQ");
+            } catch (SAMFormatException e) {
+            	// Since some submissions seem to have put an evalue here
+            	reportErrorParsingLine("Bad MAPQ value in column " + MAPQ_COL + "; setting to 255");
+            	mapq = 255;
+            }
             final String cigar = mFields[CIGAR_COL];
             if (!SAMRecord.NO_ALIGNMENT_REFERENCE_NAME.equals(samRecord.getReferenceName())) {
                 if (pos == 0) {
@@ -435,15 +442,39 @@
 
         private void parseTag(final SAMRecord samRecord, final String tag) {
             Map.Entry<String, Object> entry = null;
+            
             try {
                 entry = tagCodec.decode(tag);
             } catch (SAMFormatException e) {
-                reportErrorParsingLine(e);
+            	if (e.getMessage() == "Tag of type i should have signed decimal value" && (entry = parseIntAsFloat(tag)) != null) {
+            		// Parsed as a float instead
+            	} else {
+	            	// If we can split on spaces, maybe it's just spaces not tabs
+	            	final String[] splitTags = new String[10000];
+	            	final int numTags = StringUtil.split(tag, splitTags, ' ');
+	            	if (numTags > 1) {
+	            		reportErrorParsingLine("Tag values should be separated by tabs, not spaces");
+	            		for (int i = 0; i < numTags; i++) {
+	            			parseTag(samRecord, splitTags[i]);
+	            		}
+	            	} else {
+	            		// Nope, just badly formatted
+	                    reportErrorParsingLine(e);
+	            	}
+            	}
             }
             if (entry != null) {
                 samRecord.setAttribute(entry.getKey(), entry.getValue());
             }
         }
     }
+    private Map.Entry<String, Object> parseIntAsFloat(String tag) throws SAMFormatException {
+    	String[] tagParts = tag.split(":");
+    	if (tagParts.length == 3) {
+    		tagParts[1] = "f";
+    		return tagCodec.decode(tagParts[0] + ":" + tagParts[1] + ":" + tagParts[2]);
+    	}
+    	return null;
+    }
 }
 
